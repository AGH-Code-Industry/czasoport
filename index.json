{
  "api/Application.ApplicationSettingsSO.html": {
    "href": "api/Application.ApplicationSettingsSO.html",
    "title": "Class ApplicationSettingsSO | Czasoport Documentation",
    "keywords": "Class ApplicationSettingsSO Namespace Application Settings for entire application that defines variables for startup, core processes and shutdown public class ApplicationSettingsSO : ScriptableObject Inheritance object ApplicationSettingsSO Fields gameSceneName public string gameSceneName Field Value string lvlDefinitionsResPath public string lvlDefinitionsResPath Field Value string saveFileName public string saveFileName Field Value string"
  },
  "api/Application.GameManager.html": {
    "href": "api/Application.GameManager.html",
    "title": "Class GameManager | Czasoport Documentation",
    "keywords": "Class GameManager Namespace Application public class GameManager : MonoBehaviour Inheritance object GameManager"
  },
  "api/Application.GlobalExceptions.SingletonOverrideException.html": {
    "href": "api/Application.GlobalExceptions.SingletonOverrideException.html",
    "title": "Class SingletonOverrideException | Czasoport Documentation",
    "keywords": "Class SingletonOverrideException Namespace Application.GlobalExceptions public class SingletonOverrideException : Exception, ISerializable Inheritance object Exception SingletonOverrideException Implements ISerializable Inherited Members Exception.GetBaseException() Exception.GetObjectData(SerializationInfo, StreamingContext) Exception.GetType() Exception.ToString() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite Exception.SerializeObjectState object.Equals(object) object.Equals(object, object) object.GetHashCode() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors SingletonOverrideException() public SingletonOverrideException() SingletonOverrideException(string) public SingletonOverrideException(string message) Parameters message string SingletonOverrideException(string, Exception) public SingletonOverrideException(string message, Exception inner) Parameters message string inner Exception"
  },
  "api/Application.GlobalExceptions.html": {
    "href": "api/Application.GlobalExceptions.html",
    "title": "Namespace Application.GlobalExceptions | Czasoport Documentation",
    "keywords": "Namespace Application.GlobalExceptions Classes SingletonOverrideException"
  },
  "api/Application.Loggers.LoggerType.html": {
    "href": "api/Application.Loggers.LoggerType.html",
    "title": "Enum Loggers.LoggerType | Czasoport Documentation",
    "keywords": "Enum Loggers.LoggerType Namespace Application public enum Loggers.LoggerType Fields DATA_PERSISTENCE = 7 INTERACTABLE_OBJECTS = 3 INTERACTIONS = 2 INVENTORY = 1 ITEMS = 4 LEVEL_SYSTEM = 0 PAUSE = 6 PORTALS = 5"
  },
  "api/Application.Loggers.html": {
    "href": "api/Application.Loggers.html",
    "title": "Class Loggers | Czasoport Documentation",
    "keywords": "Class Loggers Namespace Application public static class Loggers Inheritance object Loggers Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Fields LoggersList public static Dictionary<Loggers.LoggerType, CLogger> LoggersList Field Value Dictionary<Loggers.LoggerType, CLogger>"
  },
  "api/Application.StartupManager.html": {
    "href": "api/Application.StartupManager.html",
    "title": "Class StartupManager | Czasoport Documentation",
    "keywords": "Class StartupManager Namespace Application public class StartupManager : MonoBehaviour Inheritance object StartupManager"
  },
  "api/Application.html": {
    "href": "api/Application.html",
    "title": "Namespace Application | Czasoport Documentation",
    "keywords": "Namespace Application Classes ApplicationSettingsSO Settings for entire application that defines variables for startup, core processes and shutdown GameManager Loggers StartupManager Enums Loggers.LoggerType"
  },
  "api/CustomInput.CInput.html": {
    "href": "api/CustomInput.CInput.html",
    "title": "Class CInput | Czasoport Documentation",
    "keywords": "Class CInput Namespace CustomInput Wrapper for automatically generated InputActions. Provides easier access to reading values from input, takes care of processing for common input values. Incorporates locking mechanism. public static class CInput Inheritance object CInput Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Fields GameInputLock public static readonly GameInputLock GameInputLock Field Value GameInputLock InputActions InputActions object that CInput is based on. Should be used if there is no wrapper implemented by CInput. public static readonly InputActions InputActions Field Value InputActions InteractionsLock public static readonly InteractionsLock InteractionsLock Field Value InteractionsLock InventoryLock public static readonly InventoryLock InventoryLock Field Value InventoryLock MouseLock public static readonly MouseLock MouseLock Field Value MouseLock MovementLock public static readonly MovementLock MovementLock Field Value MovementLock TeleportLock public static readonly TeleportLock TeleportLock Field Value TeleportLock Properties MousePosition Normal mouse position from InputActions. If you want point in game over which mouse is hovering, use MouseWorldPosition. public static Vector2 MousePosition { get; } Property Value Vector2 MouseWorldPosition Mouse position casted to world coordinates. public static Vector2 MouseWorldPosition { get; } Property Value Vector2 NavigationAxis Vector2 desired player direction/ public static Vector2 NavigationAxis { get; } Property Value Vector2 Run Whether player is running, and how fast he is running (effective on gamepads). public static float Run { get; } Property Value float"
  },
  "api/CustomInput.Exceptions.NoMainCameraException.html": {
    "href": "api/CustomInput.Exceptions.NoMainCameraException.html",
    "title": "Class NoMainCameraException | Czasoport Documentation",
    "keywords": "Class NoMainCameraException Namespace CustomInput.Exceptions public class NoMainCameraException : Exception, ISerializable Inheritance object Exception NoMainCameraException Implements ISerializable Inherited Members Exception.GetBaseException() Exception.GetObjectData(SerializationInfo, StreamingContext) Exception.GetType() Exception.ToString() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite Exception.SerializeObjectState object.Equals(object) object.Equals(object, object) object.GetHashCode() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors NoMainCameraException() public NoMainCameraException() NoMainCameraException(string) public NoMainCameraException(string message) Parameters message string NoMainCameraException(string, Exception) public NoMainCameraException(string message, Exception inner) Parameters message string inner Exception"
  },
  "api/CustomInput.Exceptions.html": {
    "href": "api/CustomInput.Exceptions.html",
    "title": "Namespace CustomInput.Exceptions | Czasoport Documentation",
    "keywords": "Namespace CustomInput.Exceptions Classes NoMainCameraException"
  },
  "api/CustomInput.InputTest.html": {
    "href": "api/CustomInput.InputTest.html",
    "title": "Class InputTest | Czasoport Documentation",
    "keywords": "Class InputTest Namespace CustomInput public class InputTest : MonoBehaviour Inheritance object InputTest"
  },
  "api/CustomInput.Interactions.CustomHold.html": {
    "href": "api/CustomInput.Interactions.CustomHold.html",
    "title": "Class CustomHold | Czasoport Documentation",
    "keywords": "Class CustomHold Namespace CustomInput.Interactions public class CustomHold : IInputInteraction Inheritance object CustomHold Fields MinimalTime public float MinimalTime Field Value float Methods Process(ref InputInteractionContext) public void Process(ref InputInteractionContext context) Parameters context InputInteractionContext Reset() public void Reset()"
  },
  "api/CustomInput.Interactions.html": {
    "href": "api/CustomInput.Interactions.html",
    "title": "Namespace CustomInput.Interactions | Czasoport Documentation",
    "keywords": "Namespace CustomInput.Interactions Classes CustomHold"
  },
  "api/CustomInput.Locks.GameInputLock.html": {
    "href": "api/CustomInput.Locks.GameInputLock.html",
    "title": "Class GameInputLock | Czasoport Documentation",
    "keywords": "Class GameInputLock Namespace CustomInput.Locks Provides locking mechanism for Teleport actions. public class GameInputLock Inheritance object GameInputLock Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors GameInputLock(GameActions) public GameInputLock(InputActions.GameActions input) Parameters input InputActions.GameActions Methods Lock() Lets CustomInput know that current thread is not ready to receive input from user. 'Thread' safe, use instead of Enable and Disable on individual actions. public string Lock() Returns string Key that is needed to unlock the actions. Unlock(string) Lets CustomInput know that current thread is ready to receive input from user. public void Unlock(string key) Parameters key string Obtained by invoking Lock(). Exceptions Exception"
  },
  "api/CustomInput.Locks.InteractionsLock.html": {
    "href": "api/CustomInput.Locks.InteractionsLock.html",
    "title": "Class InteractionsLock | Czasoport Documentation",
    "keywords": "Class InteractionsLock Namespace CustomInput.Locks Provides locking mechanism for Interactions actions. public class InteractionsLock Inheritance object InteractionsLock Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors InteractionsLock(InteractionsActions) public InteractionsLock(InputActions.InteractionsActions input) Parameters input InputActions.InteractionsActions Methods Lock() Lets CustomInput know that current thread is not ready to receive input from user. 'Thread' safe, use instead of Enable and Disable on individual actions. public string Lock() Returns string Key that is needed to unlock the actions. Unlock(string) Lets CustomInput know that current thread is ready to receive input from user. public void Unlock(string key) Parameters key string Obtained by invoking Lock(). Exceptions Exception"
  },
  "api/CustomInput.Locks.InventoryLock.html": {
    "href": "api/CustomInput.Locks.InventoryLock.html",
    "title": "Class InventoryLock | Czasoport Documentation",
    "keywords": "Class InventoryLock Namespace CustomInput.Locks Provides locking mechanism for user Inventory actions. public class InventoryLock Inheritance object InventoryLock Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors InventoryLock(InventoryActions) public InventoryLock(InputActions.InventoryActions input) Parameters input InputActions.InventoryActions Methods Lock() Lets CustomInput know that current thread is not ready to receive input from user. 'Thread' safe, use instead of Enable and Disable on individual actions. public string Lock() Returns string Key that is needed to unlock the actions. Unlock(string) Lets CustomInput know that current thread is ready to receive input from user. public void Unlock(string key) Parameters key string Obtained by invoking Lock(). Exceptions Exception"
  },
  "api/CustomInput.Locks.MouseLock.html": {
    "href": "api/CustomInput.Locks.MouseLock.html",
    "title": "Class MouseLock | Czasoport Documentation",
    "keywords": "Class MouseLock Namespace CustomInput.Locks Provides locking mechanism for Mouse actions. public class MouseLock Inheritance object MouseLock Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors MouseLock(MouseActions) public MouseLock(InputActions.MouseActions input) Parameters input InputActions.MouseActions Methods Lock() Lets CustomInput know that current thread is not ready to receive input from user. 'Thread' safe, use instead of Enable and Disable on individual actions. public string Lock() Returns string Key that is needed to unlock the actions. Unlock(string) Lets CustomInput know that current thread is ready to receive input from user. public void Unlock(string key) Parameters key string Obtained by invoking Lock(). Exceptions Exception"
  },
  "api/CustomInput.Locks.MovementLock.html": {
    "href": "api/CustomInput.Locks.MovementLock.html",
    "title": "Class MovementLock | Czasoport Documentation",
    "keywords": "Class MovementLock Namespace CustomInput.Locks Provides locking mechanism for Movement actions. public class MovementLock Inheritance object MovementLock Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors MovementLock(MovementActions) public MovementLock(InputActions.MovementActions input) Parameters input InputActions.MovementActions Methods Lock() Lets CustomInput know that current thread is not ready to receive input from user. 'Thread' safe, use instead of Enable and Disable on individual actions. public string Lock() Returns string Key that is needed to unlock the actions. Unlock(string) Lets CustomInput know that current thread is ready to receive input from user. public void Unlock(string key) Parameters key string Obtained by invoking Lock(). Exceptions Exception"
  },
  "api/CustomInput.Locks.TeleportLock.html": {
    "href": "api/CustomInput.Locks.TeleportLock.html",
    "title": "Class TeleportLock | Czasoport Documentation",
    "keywords": "Class TeleportLock Namespace CustomInput.Locks Provides locking mechanism for Teleport actions. public class TeleportLock Inheritance object TeleportLock Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors TeleportLock(TeleportActions) public TeleportLock(InputActions.TeleportActions input) Parameters input InputActions.TeleportActions Methods Lock() Lets CustomInput know that current thread is not ready to receive input from user. 'Thread' safe, use instead of Enable and Disable on individual actions. public string Lock() Returns string Key that is needed to unlock the actions. Unlock(string) Lets CustomInput know that current thread is ready to receive input from user. public void Unlock(string key) Parameters key string Obtained by invoking Lock(). Exceptions Exception"
  },
  "api/CustomInput.Locks.html": {
    "href": "api/CustomInput.Locks.html",
    "title": "Namespace CustomInput.Locks | Czasoport Documentation",
    "keywords": "Namespace CustomInput.Locks Classes GameInputLock Provides locking mechanism for Teleport actions. InteractionsLock Provides locking mechanism for Interactions actions. InventoryLock Provides locking mechanism for user Inventory actions. MouseLock Provides locking mechanism for Mouse actions. MovementLock Provides locking mechanism for Movement actions. TeleportLock Provides locking mechanism for Teleport actions."
  },
  "api/CustomInput.html": {
    "href": "api/CustomInput.html",
    "title": "Namespace CustomInput | Czasoport Documentation",
    "keywords": "Namespace CustomInput Classes CInput Wrapper for automatically generated InputActions. Provides easier access to reading values from input, takes care of processing for common input values. Incorporates locking mechanism. InputTest"
  },
  "api/DataPersistence.DataPersistenceManager.html": {
    "href": "api/DataPersistence.DataPersistenceManager.html",
    "title": "Class DataPersistenceManager | Czasoport Documentation",
    "keywords": "Class DataPersistenceManager Namespace DataPersistence public class DataPersistenceManager : MonoBehaviour Inheritance object DataPersistenceManager Fields gameData [NonSerialized] public GameData gameData Field Value GameData Properties Instance public static DataPersistenceManager Instance { get; } Property Value DataPersistenceManager Methods CreateNewGame() public void CreateNewGame() LoadGame() public void LoadGame() LoadGameFromDisk() public void LoadGameFromDisk() SaveGame() public void SaveGame() SaveGameToDisk() public void SaveGameToDisk()"
  },
  "api/DataPersistence.DataTypes.PlayerGameData.html": {
    "href": "api/DataPersistence.DataTypes.PlayerGameData.html",
    "title": "Class PlayerGameData | Czasoport Documentation",
    "keywords": "Class PlayerGameData Namespace DataPersistence.DataTypes [Serializable] public class PlayerGameData Inheritance object PlayerGameData Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors PlayerGameData() public PlayerGameData() Fields position public Vector2 position Field Value Vector2"
  },
  "api/DataPersistence.DataTypes.html": {
    "href": "api/DataPersistence.DataTypes.html",
    "title": "Namespace DataPersistence.DataTypes | Czasoport Documentation",
    "keywords": "Namespace DataPersistence.DataTypes Classes PlayerGameData"
  },
  "api/DataPersistence.DefaultSaveDataSO.html": {
    "href": "api/DataPersistence.DefaultSaveDataSO.html",
    "title": "Class DefaultSaveDataSO | Czasoport Documentation",
    "keywords": "Class DefaultSaveDataSO Namespace DataPersistence Settings for entire application that defines variables for startup, core processes and shutdown public class DefaultSaveDataSO : ScriptableObject Inheritance object DefaultSaveDataSO Fields startingLevel public LevelInfoSO startingLevel Field Value LevelInfoSO startingPlayerPositionOffset public Vector2 startingPlayerPositionOffset Field Value Vector2 startingTimeline public TimeLine startingTimeline Field Value TimeLine"
  },
  "api/DataPersistence.FileDataHandler.html": {
    "href": "api/DataPersistence.FileDataHandler.html",
    "title": "Class FileDataHandler | Czasoport Documentation",
    "keywords": "Class FileDataHandler Namespace DataPersistence public class FileDataHandler Inheritance object FileDataHandler Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors FileDataHandler(string, string) public FileDataHandler(string saveDirectory, string saveFileName) Parameters saveDirectory string saveFileName string Methods Load() public GameData Load() Returns GameData Save(GameData) public bool Save(GameData gameData) Parameters gameData GameData Returns bool"
  },
  "api/DataPersistence.GameData.html": {
    "href": "api/DataPersistence.GameData.html",
    "title": "Class GameData | Czasoport Documentation",
    "keywords": "Class GameData Namespace DataPersistence [Serializable] public class GameData Inheritance object GameData Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors GameData() public GameData() Fields currentLevel public string currentLevel Field Value string currentTimeline public TimeLine currentTimeline Field Value TimeLine playerGameData public PlayerGameData playerGameData Field Value PlayerGameData"
  },
  "api/DataPersistence.IDataPersistence.html": {
    "href": "api/DataPersistence.IDataPersistence.html",
    "title": "Interface IDataPersistence | Czasoport Documentation",
    "keywords": "Interface IDataPersistence Namespace DataPersistence public interface IDataPersistence Methods LoadPersistentData(GameData) void LoadPersistentData(GameData gameData) Parameters gameData GameData SavePersistentData(ref GameData) void SavePersistentData(ref GameData gameData) Parameters gameData GameData"
  },
  "api/DataPersistence.html": {
    "href": "api/DataPersistence.html",
    "title": "Namespace DataPersistence | Czasoport Documentation",
    "keywords": "Namespace DataPersistence Classes DataPersistenceManager DefaultSaveDataSO Settings for entire application that defines variables for startup, core processes and shutdown FileDataHandler GameData Interfaces IDataPersistence"
  },
  "api/Global.InputActions.GameActions.html": {
    "href": "api/Global.InputActions.GameActions.html",
    "title": "Struct InputActions.GameActions | Czasoport Documentation",
    "keywords": "Struct InputActions.GameActions Namespace Global public struct InputActions.GameActions Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Constructors GameActions(InputActions) public GameActions(InputActions wrapper) Parameters wrapper InputActions Properties TogglePause public InputAction TogglePause { get; } Property Value InputAction enabled public bool enabled { get; } Property Value bool Methods Disable() public void Disable() Enable() public void Enable() Get() public InputActionMap Get() Returns InputActionMap SetCallbacks(IGameActions) public void SetCallbacks(InputActions.IGameActions instance) Parameters instance InputActions.IGameActions Operators implicit operator InputActionMap(GameActions) public static implicit operator InputActionMap(InputActions.GameActions set) Parameters set InputActions.GameActions Returns InputActionMap"
  },
  "api/Global.InputActions.IGameActions.html": {
    "href": "api/Global.InputActions.IGameActions.html",
    "title": "Interface InputActions.IGameActions | Czasoport Documentation",
    "keywords": "Interface InputActions.IGameActions Namespace Global public interface InputActions.IGameActions Methods OnTogglePause(CallbackContext) void OnTogglePause(InputAction.CallbackContext context) Parameters context CallbackContext"
  },
  "api/Global.InputActions.IInteractionsActions.html": {
    "href": "api/Global.InputActions.IInteractionsActions.html",
    "title": "Interface InputActions.IInteractionsActions | Czasoport Documentation",
    "keywords": "Interface InputActions.IInteractionsActions Namespace Global public interface InputActions.IInteractionsActions Methods OnInteraction(CallbackContext) void OnInteraction(InputAction.CallbackContext context) Parameters context CallbackContext OnItemInteraction(CallbackContext) void OnItemInteraction(InputAction.CallbackContext context) Parameters context CallbackContext OnLongInteraction(CallbackContext) void OnLongInteraction(InputAction.CallbackContext context) Parameters context CallbackContext OnLongItemInteraction(CallbackContext) void OnLongItemInteraction(InputAction.CallbackContext context) Parameters context CallbackContext"
  },
  "api/Global.InputActions.IInventoryActions.html": {
    "href": "api/Global.InputActions.IInventoryActions.html",
    "title": "Interface InputActions.IInventoryActions | Czasoport Documentation",
    "keywords": "Interface InputActions.IInventoryActions Namespace Global public interface InputActions.IInventoryActions Methods OnChooseItem(CallbackContext) void OnChooseItem(InputAction.CallbackContext context) Parameters context CallbackContext OnDrop(CallbackContext) void OnDrop(InputAction.CallbackContext context) Parameters context CallbackContext OnNextItem(CallbackContext) void OnNextItem(InputAction.CallbackContext context) Parameters context CallbackContext OnPreviousItem(CallbackContext) void OnPreviousItem(InputAction.CallbackContext context) Parameters context CallbackContext"
  },
  "api/Global.InputActions.IMouseActions.html": {
    "href": "api/Global.InputActions.IMouseActions.html",
    "title": "Interface InputActions.IMouseActions | Czasoport Documentation",
    "keywords": "Interface InputActions.IMouseActions Namespace Global public interface InputActions.IMouseActions Methods OnLeftClick(CallbackContext) void OnLeftClick(InputAction.CallbackContext context) Parameters context CallbackContext OnMiddleClick(CallbackContext) void OnMiddleClick(InputAction.CallbackContext context) Parameters context CallbackContext OnMousePosition(CallbackContext) void OnMousePosition(InputAction.CallbackContext context) Parameters context CallbackContext OnRightClick(CallbackContext) void OnRightClick(InputAction.CallbackContext context) Parameters context CallbackContext"
  },
  "api/Global.InputActions.IMovementActions.html": {
    "href": "api/Global.InputActions.IMovementActions.html",
    "title": "Interface InputActions.IMovementActions | Czasoport Documentation",
    "keywords": "Interface InputActions.IMovementActions Namespace Global public interface InputActions.IMovementActions Methods OnFocusChange(CallbackContext) void OnFocusChange(InputAction.CallbackContext context) Parameters context CallbackContext OnNavigation(CallbackContext) void OnNavigation(InputAction.CallbackContext context) Parameters context CallbackContext OnRun(CallbackContext) void OnRun(InputAction.CallbackContext context) Parameters context CallbackContext"
  },
  "api/Global.InputActions.ITeleportActions.html": {
    "href": "api/Global.InputActions.ITeleportActions.html",
    "title": "Interface InputActions.ITeleportActions | Czasoport Documentation",
    "keywords": "Interface InputActions.ITeleportActions Namespace Global public interface InputActions.ITeleportActions Methods OnTeleportBack(CallbackContext) void OnTeleportBack(InputAction.CallbackContext context) Parameters context CallbackContext OnTeleportForward(CallbackContext) void OnTeleportForward(InputAction.CallbackContext context) Parameters context CallbackContext"
  },
  "api/Global.InputActions.InteractionsActions.html": {
    "href": "api/Global.InputActions.InteractionsActions.html",
    "title": "Struct InputActions.InteractionsActions | Czasoport Documentation",
    "keywords": "Struct InputActions.InteractionsActions Namespace Global public struct InputActions.InteractionsActions Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Constructors InteractionsActions(InputActions) public InteractionsActions(InputActions wrapper) Parameters wrapper InputActions Properties Interaction public InputAction Interaction { get; } Property Value InputAction ItemInteraction public InputAction ItemInteraction { get; } Property Value InputAction LongInteraction public InputAction LongInteraction { get; } Property Value InputAction LongItemInteraction public InputAction LongItemInteraction { get; } Property Value InputAction enabled public bool enabled { get; } Property Value bool Methods Disable() public void Disable() Enable() public void Enable() Get() public InputActionMap Get() Returns InputActionMap SetCallbacks(IInteractionsActions) public void SetCallbacks(InputActions.IInteractionsActions instance) Parameters instance InputActions.IInteractionsActions Operators implicit operator InputActionMap(InteractionsActions) public static implicit operator InputActionMap(InputActions.InteractionsActions set) Parameters set InputActions.InteractionsActions Returns InputActionMap"
  },
  "api/Global.InputActions.InventoryActions.html": {
    "href": "api/Global.InputActions.InventoryActions.html",
    "title": "Struct InputActions.InventoryActions | Czasoport Documentation",
    "keywords": "Struct InputActions.InventoryActions Namespace Global public struct InputActions.InventoryActions Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Constructors InventoryActions(InputActions) public InventoryActions(InputActions wrapper) Parameters wrapper InputActions Properties ChooseItem public InputAction ChooseItem { get; } Property Value InputAction Drop public InputAction Drop { get; } Property Value InputAction NextItem public InputAction NextItem { get; } Property Value InputAction PreviousItem public InputAction PreviousItem { get; } Property Value InputAction enabled public bool enabled { get; } Property Value bool Methods Disable() public void Disable() Enable() public void Enable() Get() public InputActionMap Get() Returns InputActionMap SetCallbacks(IInventoryActions) public void SetCallbacks(InputActions.IInventoryActions instance) Parameters instance InputActions.IInventoryActions Operators implicit operator InputActionMap(InventoryActions) public static implicit operator InputActionMap(InputActions.InventoryActions set) Parameters set InputActions.InventoryActions Returns InputActionMap"
  },
  "api/Global.InputActions.MouseActions.html": {
    "href": "api/Global.InputActions.MouseActions.html",
    "title": "Struct InputActions.MouseActions | Czasoport Documentation",
    "keywords": "Struct InputActions.MouseActions Namespace Global public struct InputActions.MouseActions Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Constructors MouseActions(InputActions) public MouseActions(InputActions wrapper) Parameters wrapper InputActions Properties LeftClick public InputAction LeftClick { get; } Property Value InputAction MiddleClick public InputAction MiddleClick { get; } Property Value InputAction MousePosition public InputAction MousePosition { get; } Property Value InputAction RightClick public InputAction RightClick { get; } Property Value InputAction enabled public bool enabled { get; } Property Value bool Methods Disable() public void Disable() Enable() public void Enable() Get() public InputActionMap Get() Returns InputActionMap SetCallbacks(IMouseActions) public void SetCallbacks(InputActions.IMouseActions instance) Parameters instance InputActions.IMouseActions Operators implicit operator InputActionMap(MouseActions) public static implicit operator InputActionMap(InputActions.MouseActions set) Parameters set InputActions.MouseActions Returns InputActionMap"
  },
  "api/Global.InputActions.MovementActions.html": {
    "href": "api/Global.InputActions.MovementActions.html",
    "title": "Struct InputActions.MovementActions | Czasoport Documentation",
    "keywords": "Struct InputActions.MovementActions Namespace Global public struct InputActions.MovementActions Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Constructors MovementActions(InputActions) public MovementActions(InputActions wrapper) Parameters wrapper InputActions Properties FocusChange public InputAction FocusChange { get; } Property Value InputAction Navigation public InputAction Navigation { get; } Property Value InputAction Run public InputAction Run { get; } Property Value InputAction enabled public bool enabled { get; } Property Value bool Methods Disable() public void Disable() Enable() public void Enable() Get() public InputActionMap Get() Returns InputActionMap SetCallbacks(IMovementActions) public void SetCallbacks(InputActions.IMovementActions instance) Parameters instance InputActions.IMovementActions Operators implicit operator InputActionMap(MovementActions) public static implicit operator InputActionMap(InputActions.MovementActions set) Parameters set InputActions.MovementActions Returns InputActionMap"
  },
  "api/Global.InputActions.TeleportActions.html": {
    "href": "api/Global.InputActions.TeleportActions.html",
    "title": "Struct InputActions.TeleportActions | Czasoport Documentation",
    "keywords": "Struct InputActions.TeleportActions Namespace Global public struct InputActions.TeleportActions Inherited Members ValueType.Equals(object) ValueType.GetHashCode() ValueType.ToString() object.Equals(object, object) object.GetType() object.ReferenceEquals(object, object) Constructors TeleportActions(InputActions) public TeleportActions(InputActions wrapper) Parameters wrapper InputActions Properties TeleportBack public InputAction TeleportBack { get; } Property Value InputAction TeleportForward public InputAction TeleportForward { get; } Property Value InputAction enabled public bool enabled { get; } Property Value bool Methods Disable() public void Disable() Enable() public void Enable() Get() public InputActionMap Get() Returns InputActionMap SetCallbacks(ITeleportActions) public void SetCallbacks(InputActions.ITeleportActions instance) Parameters instance InputActions.ITeleportActions Operators implicit operator InputActionMap(TeleportActions) public static implicit operator InputActionMap(InputActions.TeleportActions set) Parameters set InputActions.TeleportActions Returns InputActionMap"
  },
  "api/Global.InputActions.html": {
    "href": "api/Global.InputActions.html",
    "title": "Class InputActions | Czasoport Documentation",
    "keywords": "Class InputActions Namespace Global public class InputActions : IInputActionCollection2, IDisposable Inheritance object InputActions Implements IDisposable Constructors InputActions() public InputActions() Properties Game public InputActions.GameActions Game { get; } Property Value InputActions.GameActions Interactions public InputActions.InteractionsActions Interactions { get; } Property Value InputActions.InteractionsActions Inventory public InputActions.InventoryActions Inventory { get; } Property Value InputActions.InventoryActions Mouse public InputActions.MouseActions Mouse { get; } Property Value InputActions.MouseActions Movement public InputActions.MovementActions Movement { get; } Property Value InputActions.MovementActions Teleport public InputActions.TeleportActions Teleport { get; } Property Value InputActions.TeleportActions asset public InputActionAsset asset { get; } Property Value InputActionAsset bindingMask public InputBinding? bindingMask { get; set; } Property Value InputBinding? bindings public IEnumerable<InputBinding> bindings { get; } Property Value IEnumerable<InputBinding> controlSchemes public ReadOnlyArray<InputControlScheme> controlSchemes { get; } Property Value ReadOnlyArray<InputControlScheme> devices public ReadOnlyArray<InputDevice>? devices { get; set; } Property Value ReadOnlyArray<InputDevice>? Methods Contains(InputAction) public bool Contains(InputAction action) Parameters action InputAction Returns bool Disable() public void Disable() Dispose() Performs application-defined tasks associated with freeing, releasing, or resetting unmanaged resources. public void Dispose() Enable() public void Enable() FindAction(string, bool) public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false) Parameters actionNameOrId string throwIfNotFound bool Returns InputAction FindBinding(InputBinding, out InputAction) public int FindBinding(InputBinding bindingMask, out InputAction action) Parameters bindingMask InputBinding action InputAction Returns int GetEnumerator() public IEnumerator<InputAction> GetEnumerator() Returns IEnumerator<InputAction>"
  },
  "api/Global.SettingsTests.html": {
    "href": "api/Global.SettingsTests.html",
    "title": "Class SettingsTests | Czasoport Documentation",
    "keywords": "Class SettingsTests Namespace Global public class SettingsTests : MonoBehaviour Inheritance object SettingsTests"
  },
  "api/Global.html": {
    "href": "api/Global.html",
    "title": "Namespace | Czasoport Documentation",
    "keywords": "Namespace Classes InputActions SettingsTests Structs InputActions.GameActions InputActions.InteractionsActions InputActions.InventoryActions InputActions.MouseActions InputActions.MovementActions InputActions.TeleportActions Interfaces InputActions.IGameActions InputActions.IInteractionsActions InputActions.IInventoryActions InputActions.IMouseActions InputActions.IMovementActions InputActions.ITeleportActions"
  },
  "api/InteractableObjectSystem.InteractableObject.html": {
    "href": "api/InteractableObjectSystem.InteractableObject.html",
    "title": "Class InteractableObject | Czasoport Documentation",
    "keywords": "Class InteractableObject Namespace InteractableObjectSystem public abstract class InteractableObject : MonoBehaviour, IItemInteractable, IHandInteractable, ILongHandInteractable, ILongItemInteractable Inheritance object InteractableObject Implements IItemInteractable IHandInteractable ILongHandInteractable ILongItemInteractable Derived LockedDoor Methods InteractionHand() public virtual void InteractionHand() InteractionItem(Item) public virtual bool InteractionItem(Item item) Parameters item Item Returns bool LongInteractionHand() public virtual void LongInteractionHand() LongInteractionItem(Item) public virtual bool LongInteractionItem(Item item) Parameters item Item Returns bool"
  },
  "api/InteractableObjectSystem.Objects.LockedDoor.html": {
    "href": "api/InteractableObjectSystem.Objects.LockedDoor.html",
    "title": "Class LockedDoor | Czasoport Documentation",
    "keywords": "Class LockedDoor Namespace InteractableObjectSystem.Objects public class LockedDoor : InteractableObject, IItemInteractable, IHandInteractable, ILongHandInteractable, ILongItemInteractable Inheritance object InteractableObject LockedDoor Implements IItemInteractable IHandInteractable ILongHandInteractable ILongItemInteractable Inherited Members InteractableObject.LongInteractionItem(Item) InteractableObject.LongInteractionHand() Methods InteractionHand() public override void InteractionHand() InteractionItem(Item) public override bool InteractionItem(Item item) Parameters item Item Returns bool"
  },
  "api/InteractableObjectSystem.Objects.html": {
    "href": "api/InteractableObjectSystem.Objects.html",
    "title": "Namespace InteractableObjectSystem.Objects | Czasoport Documentation",
    "keywords": "Namespace InteractableObjectSystem.Objects Classes LockedDoor"
  },
  "api/InteractableObjectSystem.html": {
    "href": "api/InteractableObjectSystem.html",
    "title": "Namespace InteractableObjectSystem | Czasoport Documentation",
    "keywords": "Namespace InteractableObjectSystem Classes InteractableObject"
  },
  "api/Interactions.HighlightInteraction.html": {
    "href": "api/Interactions.HighlightInteraction.html",
    "title": "Class HighlightInteraction | Czasoport Documentation",
    "keywords": "Class HighlightInteraction Namespace Interactions public class HighlightInteraction : MonoBehaviour, IHighlightable Inheritance object HighlightInteraction Implements IHighlightable Methods DisableHighlight() public void DisableHighlight() EnableFocusedHighlight() public void EnableFocusedHighlight() EnableHighlight() public void EnableHighlight()"
  },
  "api/Interactions.Interactions.html": {
    "href": "api/Interactions.Interactions.html",
    "title": "Class Interactions | Czasoport Documentation",
    "keywords": "Class Interactions Namespace Interactions public class Interactions : MonoBehaviour Inheritance object Interactions Fields Instance public static Interactions Instance Field Value Interactions"
  },
  "api/Interactions.InteractionsSettingsSO.html": {
    "href": "api/Interactions.InteractionsSettingsSO.html",
    "title": "Class InteractionsSettingsSO | Czasoport Documentation",
    "keywords": "Class InteractionsSettingsSO Namespace Interactions public class InteractionsSettingsSO : ScriptableObject Inheritance object InteractionsSettingsSO Fields defaultInteractionRadius public float defaultInteractionRadius Field Value float interactablesLayer public string interactablesLayer Field Value string interactionCheckInterval public float interactionCheckInterval Field Value float itemsLayer public string itemsLayer Field Value string"
  },
  "api/Interactions.Interfaces.IHandInteractable.html": {
    "href": "api/Interactions.Interfaces.IHandInteractable.html",
    "title": "Interface IHandInteractable | Czasoport Documentation",
    "keywords": "Interface IHandInteractable Namespace Interactions.Interfaces public interface IHandInteractable Methods InteractionHand() void InteractionHand()"
  },
  "api/Interactions.Interfaces.IHighlightable.html": {
    "href": "api/Interactions.Interfaces.IHighlightable.html",
    "title": "Interface IHighlightable | Czasoport Documentation",
    "keywords": "Interface IHighlightable Namespace Interactions.Interfaces public interface IHighlightable Methods DisableHighlight() void DisableHighlight() EnableFocusedHighlight() void EnableFocusedHighlight() EnableHighlight() void EnableHighlight()"
  },
  "api/Interactions.Interfaces.IItemInteractable.html": {
    "href": "api/Interactions.Interfaces.IItemInteractable.html",
    "title": "Interface IItemInteractable | Czasoport Documentation",
    "keywords": "Interface IItemInteractable Namespace Interactions.Interfaces public interface IItemInteractable Methods InteractionItem(Item) bool InteractionItem(Item item) Parameters item Item Returns bool"
  },
  "api/Interactions.Interfaces.ILongHandInteractable.html": {
    "href": "api/Interactions.Interfaces.ILongHandInteractable.html",
    "title": "Interface ILongHandInteractable | Czasoport Documentation",
    "keywords": "Interface ILongHandInteractable Namespace Interactions.Interfaces public interface ILongHandInteractable Methods LongInteractionHand() void LongInteractionHand()"
  },
  "api/Interactions.Interfaces.ILongItemInteractable.html": {
    "href": "api/Interactions.Interfaces.ILongItemInteractable.html",
    "title": "Interface ILongItemInteractable | Czasoport Documentation",
    "keywords": "Interface ILongItemInteractable Namespace Interactions.Interfaces public interface ILongItemInteractable Methods LongInteractionItem(Item) bool LongInteractionItem(Item item) Parameters item Item Returns bool"
  },
  "api/Interactions.Interfaces.html": {
    "href": "api/Interactions.Interfaces.html",
    "title": "Namespace Interactions.Interfaces | Czasoport Documentation",
    "keywords": "Namespace Interactions.Interfaces Interfaces IHandInteractable IHighlightable IItemInteractable ILongHandInteractable ILongItemInteractable"
  },
  "api/Interactions.html": {
    "href": "api/Interactions.html",
    "title": "Namespace Interactions | Czasoport Documentation",
    "keywords": "Namespace Interactions Classes HighlightInteraction Interactions InteractionsSettingsSO"
  },
  "api/InventorySystem.EventArguments.ItemInsertedEventArgs.html": {
    "href": "api/InventorySystem.EventArguments.ItemInsertedEventArgs.html",
    "title": "Class ItemInsertedEventArgs | Czasoport Documentation",
    "keywords": "Class ItemInsertedEventArgs Namespace InventorySystem.EventArguments public class ItemInsertedEventArgs : EventArgs Inheritance object EventArgs ItemInsertedEventArgs Inherited Members EventArgs.Empty object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Fields Item public Item Item Field Value Item Slot public int Slot Field Value int"
  },
  "api/InventorySystem.EventArguments.ItemRemovedEventArgs.html": {
    "href": "api/InventorySystem.EventArguments.ItemRemovedEventArgs.html",
    "title": "Class ItemRemovedEventArgs | Czasoport Documentation",
    "keywords": "Class ItemRemovedEventArgs Namespace InventorySystem.EventArguments public class ItemRemovedEventArgs : EventArgs Inheritance object EventArgs ItemRemovedEventArgs Inherited Members EventArgs.Empty object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Fields Item public Item Item Field Value Item Slot public int Slot Field Value int"
  },
  "api/InventorySystem.EventArguments.ItemStateChangedEventArgs.html": {
    "href": "api/InventorySystem.EventArguments.ItemStateChangedEventArgs.html",
    "title": "Class ItemStateChangedEventArgs | Czasoport Documentation",
    "keywords": "Class ItemStateChangedEventArgs Namespace InventorySystem.EventArguments public class ItemStateChangedEventArgs Inheritance object ItemStateChangedEventArgs Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Fields Item public Item Item Field Value Item Slot public int Slot Field Value int"
  },
  "api/InventorySystem.EventArguments.SelectedSlotChangedEventArgs.html": {
    "href": "api/InventorySystem.EventArguments.SelectedSlotChangedEventArgs.html",
    "title": "Class SelectedSlotChangedEventArgs | Czasoport Documentation",
    "keywords": "Class SelectedSlotChangedEventArgs Namespace InventorySystem.EventArguments public class SelectedSlotChangedEventArgs : EventArgs Inheritance object EventArgs SelectedSlotChangedEventArgs Inherited Members EventArgs.Empty object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Fields Slot public int Slot Field Value int"
  },
  "api/InventorySystem.EventArguments.html": {
    "href": "api/InventorySystem.EventArguments.html",
    "title": "Namespace InventorySystem.EventArguments | Czasoport Documentation",
    "keywords": "Namespace InventorySystem.EventArguments Classes ItemInsertedEventArgs ItemRemovedEventArgs ItemStateChangedEventArgs SelectedSlotChangedEventArgs"
  },
  "api/InventorySystem.Inventory.html": {
    "href": "api/InventorySystem.Inventory.html",
    "title": "Class Inventory | Czasoport Documentation",
    "keywords": "Class Inventory Namespace InventorySystem public class Inventory : MonoBehaviour Inheritance object Inventory Fields Instance public static Inventory Instance Field Value Inventory itemHideout public Transform itemHideout Field Value Transform Methods GetAllItems() Get list of items in inventory without removing them. All null values are removed, so items won't keep their original indexes. public List<Item> GetAllItems() Returns List<Item> List of Items, without including empty slots. GetInventory() Get inventory, including empty slots, without removing items in it. Items are placed on their corresponding indexes. public Item[] GetInventory() Returns Item[] Array of Item objects including empty slots. GetSelectedItem(out Item) Get currently selected item, but do not remove this item from inventory. public bool GetSelectedItem(out Item item) Parameters item Item Retrieved item if slot was not empty. Returns bool True if slot was not empty, false if slot was empty. If empty, then item will be null. InsertItem(Item) Insert item into inventory. If the selected slot is empty, then item is placed into that slot. public bool InsertItem(Item item) Parameters item Item Item to insert. Returns bool RemoveItem(out Item) Retrieve and remove item from the Inventory. Empty slot is always the result. public bool RemoveItem(out Item item) Parameters item Item Removed item if selected slot was not empty. Returns bool True if item was removed, false if slot was empty. If false, retrieved item will be null. Events ItemInserted public event EventHandler<ItemInsertedEventArgs> ItemInserted Event Type EventHandler<ItemInsertedEventArgs> ItemRemoved public event EventHandler<ItemRemovedEventArgs> ItemRemoved Event Type EventHandler<ItemRemovedEventArgs> ItemStateChanged public event EventHandler<ItemStateChangedEventArgs> ItemStateChanged Event Type EventHandler<ItemStateChangedEventArgs> SelectedSlotChanged public event EventHandler<SelectedSlotChangedEventArgs> SelectedSlotChanged Event Type EventHandler<SelectedSlotChangedEventArgs>"
  },
  "api/InventorySystem.InventorySettingsSO.html": {
    "href": "api/InventorySystem.InventorySettingsSO.html",
    "title": "Class InventorySettingsSO | Czasoport Documentation",
    "keywords": "Class InventorySettingsSO Namespace InventorySystem public class InventorySettingsSO : ScriptableObject Inheritance object InventorySettingsSO Fields itemsCount public int itemsCount Field Value int"
  },
  "api/InventorySystem.Tests.InventoryGeneralTests.html": {
    "href": "api/InventorySystem.Tests.InventoryGeneralTests.html",
    "title": "Class InventoryGeneralTests | Czasoport Documentation",
    "keywords": "Class InventoryGeneralTests Namespace InventorySystem.Tests public class InventoryGeneralTests : MonoBehaviour Inheritance object InventoryGeneralTests Methods Start() public void Start()"
  },
  "api/InventorySystem.Tests.html": {
    "href": "api/InventorySystem.Tests.html",
    "title": "Namespace InventorySystem.Tests | Czasoport Documentation",
    "keywords": "Namespace InventorySystem.Tests Classes InventoryGeneralTests"
  },
  "api/InventorySystem.UI.InventoryUI.html": {
    "href": "api/InventorySystem.UI.InventoryUI.html",
    "title": "Class InventoryUI | Czasoport Documentation",
    "keywords": "Class InventoryUI Namespace InventorySystem.UI Manages UI of inventory slots. public class InventoryUI : MonoBehaviour Inheritance object InventoryUI Methods OnChangeSelectedSlot(object, SelectedSlotChangedEventArgs) Highlight choosed slot public void OnChangeSelectedSlot(object sender, SelectedSlotChangedEventArgs args) Parameters sender object args SelectedSlotChangedEventArgs OnItemAdded(object, ItemInsertedEventArgs) Change slot's image to newItem and set durability. public void OnItemAdded(object sender, ItemInsertedEventArgs args) Parameters sender object args ItemInsertedEventArgs OnItemChangeState(object, ItemStateChangedEventArgs) Change slot's image and durability. public void OnItemChangeState(object sender, ItemStateChangedEventArgs args) Parameters sender object args ItemStateChangedEventArgs OnItemRemoved(object, ItemRemovedEventArgs) Change slot's image.apha to 0 and set text responsible for durability to \"\". public void OnItemRemoved(object sender, ItemRemovedEventArgs args) Parameters sender object args ItemRemovedEventArgs"
  },
  "api/InventorySystem.UI.Slot.html": {
    "href": "api/InventorySystem.UI.Slot.html",
    "title": "Class Slot | Czasoport Documentation",
    "keywords": "Class Slot Namespace InventorySystem.UI UI slot class. public class Slot : MonoBehaviour Inheritance object Slot Methods Active() Active slot's frame public void Active() AddItem(Sprite) Add item to slot public void AddItem(Sprite newItem) Parameters newItem Sprite Disactive() Disactive slot's frame public void Disactive() RemoveItem() Remove item from slot public void RemoveItem() SetDurability(int) Change slot's text to new_durability or \"\" public void SetDurability(int new_durability) Parameters new_durability int"
  },
  "api/InventorySystem.UI.Test.TestEvents.html": {
    "href": "api/InventorySystem.UI.Test.TestEvents.html",
    "title": "Class TestEvents | Czasoport Documentation",
    "keywords": "Class TestEvents Namespace InventorySystem.UI.Test Script to test InventoryUI public class TestEvents : MonoBehaviour Inheritance object TestEvents"
  },
  "api/InventorySystem.UI.Test.html": {
    "href": "api/InventorySystem.UI.Test.html",
    "title": "Namespace InventorySystem.UI.Test | Czasoport Documentation",
    "keywords": "Namespace InventorySystem.UI.Test Classes TestEvents Script to test InventoryUI"
  },
  "api/InventorySystem.UI.html": {
    "href": "api/InventorySystem.UI.html",
    "title": "Namespace InventorySystem.UI | Czasoport Documentation",
    "keywords": "Namespace InventorySystem.UI Classes InventoryUI Manages UI of inventory slots. Slot UI slot class."
  },
  "api/InventorySystem.html": {
    "href": "api/InventorySystem.html",
    "title": "Namespace InventorySystem | Czasoport Documentation",
    "keywords": "Namespace InventorySystem Classes Inventory InventorySettingsSO"
  },
  "api/Items.Item.html": {
    "href": "api/Items.Item.html",
    "title": "Class Item | Czasoport Documentation",
    "keywords": "Class Item Namespace Items public class Item : MonoBehaviour, IHandInteractable, ILongHandInteractable Inheritance object Item Implements IHandInteractable ILongHandInteractable Fields uniqueId public string uniqueId Field Value string Properties ItemSO public ItemSO ItemSO { get; } Property Value ItemSO Methods InteractionHand() public void InteractionHand() LongInteractionHand() public void LongInteractionHand() ToString() public override string ToString() Returns string"
  },
  "api/Items.ItemSO.html": {
    "href": "api/Items.ItemSO.html",
    "title": "Class ItemSO | Czasoport Documentation",
    "keywords": "Class ItemSO Namespace Items Scriptable object for items public class ItemSO : ScriptableObject Inheritance object ItemSO Fields description public string description Field Value string durability public int durability Field Value int image public Sprite image Field Value Sprite interactionDistance public float interactionDistance Field Value float itemName public string itemName Field Value string prefab public GameObject prefab Field Value GameObject Methods ToString() public override string ToString() Returns string"
  },
  "api/Items.html": {
    "href": "api/Items.html",
    "title": "Namespace Items | Czasoport Documentation",
    "keywords": "Namespace Items Classes Item ItemSO Scriptable object for items"
  },
  "api/LevelTimeChange.LevelsLoader.LevelInfoSO.html": {
    "href": "api/LevelTimeChange.LevelsLoader.LevelInfoSO.html",
    "title": "Class LevelInfoSO | Czasoport Documentation",
    "keywords": "Class LevelInfoSO Namespace LevelTimeChange.LevelsLoader Stores information about one 'platform' in the game. public class LevelInfoSO : UniqueScriptableObject Inheritance object UniqueScriptableObject LevelInfoSO Inherited Members UniqueScriptableObject.uniqueId UniqueScriptableObject.GenerateUniqueId() Fields neighbourLevels public LevelInfoSO[] neighbourLevels Field Value LevelInfoSO[] sceneName public string sceneName Field Value string Methods ToString() public override string ToString() Returns string"
  },
  "api/LevelTimeChange.LevelsLoader.LevelManager.html": {
    "href": "api/LevelTimeChange.LevelsLoader.LevelManager.html",
    "title": "Class LevelManager | Czasoport Documentation",
    "keywords": "Class LevelManager Namespace LevelTimeChange.LevelsLoader LevelManager is responsible for managing one 'level platform'. It activates and deactivates level content, talks with LevelsManager and LevelPortals to perform Discovery process. public class LevelManager : MonoBehaviour Inheritance object LevelManager Fields currentLevel public LevelInfoSO currentLevel Field Value LevelInfoSO neighborLevels public List<LevelInfoSO> neighborLevels Field Value List<LevelInfoSO> Methods ActivateLevel() It will set all level content to be active. Use it only when this level is going to be one played on by the player. public void ActivateLevel() AddLevelObject(GameObject) Sets object's parent to current scene's content. public void AddLevelObject(GameObject levelObject) Parameters levelObject GameObject Object that should be part of the current scene DeactivateLevel() It will set all level content to be inactive and report to LevelsManager that this scene is ready for Discovery process. It is automatically called when scene is loaded. public void DeactivateLevel() MakeDiscovery(LevelInfoSO) Start discovery process with specified level. It tells portals on this scene to try to match with portals on another one. public void MakeDiscovery(LevelInfoSO levelToDiscover) Parameters levelToDiscover LevelInfoSO Level ready for discovery process. ReturnMatchingPortal(LevelInfoSO, LevelPortal) Used in discovery process. For specified portal and source level, return matching portal on this scene. public LevelPortal ReturnMatchingPortal(LevelInfoSO sourceLevel, LevelPortal sourcePortal) Parameters sourceLevel LevelInfoSO Level that asks for discovery. sourcePortal LevelPortal Specific portal that asks for discovery. Returns LevelPortal Matching portal. Exceptions Exception Exception is thrown when there is no matching portal. ToString() public override string ToString() Returns string"
  },
  "api/LevelTimeChange.LevelsLoader.LevelPortal.html": {
    "href": "api/LevelTimeChange.LevelsLoader.LevelPortal.html",
    "title": "Class LevelPortal | Czasoport Documentation",
    "keywords": "Class LevelPortal Namespace LevelTimeChange.LevelsLoader This component is used to define teleport to another platform. Based on information provided to it, it tries to discover matching teleport on another scene. When successful, it is able to teleport player to this scene. public class LevelPortal : MonoBehaviour Inheritance object LevelPortal Fields destinedLevel public LevelInfoSO destinedLevel Field Value LevelInfoSO Methods GetTeleportPoint() Returns point in the world this teleports point to. public Vector3 GetTeleportPoint() Returns Vector3 Point in game. IsMatch(LevelInfoSO, LevelPortal) Check if provided portal matches this portal. public bool IsMatch(LevelInfoSO sourceLevel, LevelPortal sourcePortal) Parameters sourceLevel LevelInfoSO Source level. sourcePortal LevelPortal Potential level match. Returns bool True if portal is a match, False otherwise. MakeDiscovery(LevelInfoSO) Start discovery process with destined level. Invoking this function on it's own will not ensure that destined level is loaded and can take part in discovery process. public void MakeDiscovery(LevelInfoSO currentLevel) Parameters currentLevel LevelInfoSO Source level of discovery. SetTimeLine(TimeLine) Set the timeline of the portal. Used during loading scenes. public void SetTimeLine(TimeLine timeLine) Parameters timeLine TimeLine ToString() public override string ToString() Returns string"
  },
  "api/LevelTimeChange.LevelsLoader.LevelsManager.html": {
    "href": "api/LevelTimeChange.LevelsLoader.LevelsManager.html",
    "title": "Class LevelsManager | Czasoport Documentation",
    "keywords": "Class LevelsManager Namespace LevelTimeChange.LevelsLoader Manager of levels loading and switching system. Central point of communication between rest of included components. It is a singleton, attached to object present through the game. public class LevelsManager : MonoBehaviour, IDataPersistence Inheritance object LevelsManager Implements IDataPersistence Fields LoadedLevels All currently loaded levels. public Dictionary<LevelInfoSO, LevelManager> LoadedLevels Field Value Dictionary<LevelInfoSO, LevelManager> Properties CurrentLevelManager public LevelManager CurrentLevelManager { get; } Property Value LevelManager Instance Singleton instance of this class. public static LevelsManager Instance { get; } Property Value LevelsManager Methods ChangeLevel(LevelInfoSO, LevelPortal) Change active level. public void ChangeLevel(LevelInfoSO destinedLevelInfo, LevelPortal destinationPortal) Parameters destinedLevelInfo LevelInfoSO Level to be switched to. destinationPortal LevelPortal Portal to be switched to. LoadFirstLevel() Load first scene after joining the game public void LoadFirstLevel() LoadPersistentData(GameData) public void LoadPersistentData(GameData gameData) Parameters gameData GameData ReportForDiscovery(LevelInfoSO) This method is used by the LevelManager of some scene to let the system know that the scene has been loaded and is ready for discovery process from current scene. public void ReportForDiscovery(LevelInfoSO level) Parameters level LevelInfoSO SavePersistentData(ref GameData) public void SavePersistentData(ref GameData gameData) Parameters gameData GameData ToString() public override string ToString() Returns string"
  },
  "api/LevelTimeChange.LevelsLoader.html": {
    "href": "api/LevelTimeChange.LevelsLoader.html",
    "title": "Namespace LevelTimeChange.LevelsLoader | Czasoport Documentation",
    "keywords": "Namespace LevelTimeChange.LevelsLoader Classes LevelInfoSO Stores information about one 'platform' in the game. LevelManager LevelManager is responsible for managing one 'level platform'. It activates and deactivates level content, talks with LevelsManager and LevelPortals to perform Discovery process. LevelPortal This component is used to define teleport to another platform. Based on information provided to it, it tries to discover matching teleport on another scene. When successful, it is able to teleport player to this scene. LevelsManager Manager of levels loading and switching system. Central point of communication between rest of included components. It is a singleton, attached to object present through the game."
  },
  "api/LevelTimeChange.TimeChange.CheckCollider.html": {
    "href": "api/LevelTimeChange.TimeChange.CheckCollider.html",
    "title": "Class CheckCollider | Czasoport Documentation",
    "keywords": "Class CheckCollider Namespace LevelTimeChange.TimeChange Provides checking collision for time change mechanic. public class CheckCollider : MonoBehaviour Inheritance object CheckCollider Methods IsNotTouching() Checking if Player can change time. CheckCollider's collider isn't touching any not trigger collider. public bool IsNotTouching() Returns bool Whether Player can change time or not"
  },
  "api/LevelTimeChange.TimeChange.Tests.PlayerTTCtest.html": {
    "href": "api/LevelTimeChange.TimeChange.Tests.PlayerTTCtest.html",
    "title": "Class PlayerTTCtest | Czasoport Documentation",
    "keywords": "Class PlayerTTCtest Namespace LevelTimeChange.TimeChange.Tests public class PlayerTTCtest : MonoBehaviour Inheritance object PlayerTTCtest"
  },
  "api/LevelTimeChange.TimeChange.Tests.html": {
    "href": "api/LevelTimeChange.TimeChange.Tests.html",
    "title": "Namespace LevelTimeChange.TimeChange.Tests | Czasoport Documentation",
    "keywords": "Namespace LevelTimeChange.TimeChange.Tests Classes PlayerTTCtest"
  },
  "api/LevelTimeChange.TimeChange.TimeChanger.OnTimeChangeEventArgs.html": {
    "href": "api/LevelTimeChange.TimeChange.TimeChanger.OnTimeChangeEventArgs.html",
    "title": "Class TimeChanger.OnTimeChangeEventArgs | Czasoport Documentation",
    "keywords": "Class TimeChanger.OnTimeChangeEventArgs Namespace LevelTimeChange.TimeChange public class TimeChanger.OnTimeChangeEventArgs : EventArgs Inheritance object EventArgs TimeChanger.OnTimeChangeEventArgs Inherited Members EventArgs.Empty object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Fields time public TimeLine time Field Value TimeLine"
  },
  "api/LevelTimeChange.TimeChange.TimeChanger.html": {
    "href": "api/LevelTimeChange.TimeChange.TimeChanger.html",
    "title": "Class TimeChanger | Czasoport Documentation",
    "keywords": "Class TimeChanger Namespace LevelTimeChange.TimeChange Manages time changing mechanic. public class TimeChanger : MonoBehaviour, IDataPersistence Inheritance object TimeChanger Implements IDataPersistence Fields actualTime Timeline the player is currently on. public TimeLine actualTime Field Value TimeLine Properties Instance public static TimeChanger Instance { get; } Property Value TimeChanger Methods CanChangeTime(TimeLine) Asks appropriate CheckCollider if Player can change time. public bool CanChangeTime(TimeLine timeToCheck) Parameters timeToCheck TimeLine Returns bool LoadPersistentData(GameData) public void LoadPersistentData(GameData gameData) Parameters gameData GameData SavePersistentData(ref GameData) public void SavePersistentData(ref GameData gameData) Parameters gameData GameData ToString() public override string ToString() Returns string Events OnTimeChange public event EventHandler<TimeChanger.OnTimeChangeEventArgs> OnTimeChange Event Type EventHandler<TimeChanger.OnTimeChangeEventArgs>"
  },
  "api/LevelTimeChange.TimeChange.html": {
    "href": "api/LevelTimeChange.TimeChange.html",
    "title": "Namespace LevelTimeChange.TimeChange | Czasoport Documentation",
    "keywords": "Namespace LevelTimeChange.TimeChange Classes CheckCollider Provides checking collision for time change mechanic. TimeChanger Manages time changing mechanic. TimeChanger.OnTimeChangeEventArgs"
  },
  "api/LevelTimeChange.TimeLine.html": {
    "href": "api/LevelTimeChange.TimeLine.html",
    "title": "Enum TimeLine | Czasoport Documentation",
    "keywords": "Enum TimeLine Namespace LevelTimeChange public enum TimeLine Fields Future = 2 Past = 0 Present = 1"
  },
  "api/LevelTimeChange.TimePlatformChangeSettingsSO.html": {
    "href": "api/LevelTimeChange.TimePlatformChangeSettingsSO.html",
    "title": "Class TimePlatformChangeSettingsSO | Czasoport Documentation",
    "keywords": "Class TimePlatformChangeSettingsSO Namespace LevelTimeChange Settings for scene changing and time changing systems. public class TimePlatformChangeSettingsSO : ScriptableObject Inheritance object TimePlatformChangeSettingsSO Fields loopTimeChange public bool loopTimeChange Field Value bool offsetFromPresentPlatform public Vector2 offsetFromPresentPlatform Field Value Vector2 platformChangeAnimLength public float platformChangeAnimLength Field Value float timelineChangeAnimLength public float timelineChangeAnimLength Field Value float"
  },
  "api/LevelTimeChange.html": {
    "href": "api/LevelTimeChange.html",
    "title": "Namespace LevelTimeChange | Czasoport Documentation",
    "keywords": "Namespace LevelTimeChange Classes TimePlatformChangeSettingsSO Settings for scene changing and time changing systems. Enums TimeLine"
  },
  "api/PlayerScripts.Player.html": {
    "href": "api/PlayerScripts.Player.html",
    "title": "Class Player | Czasoport Documentation",
    "keywords": "Class Player Namespace PlayerScripts public class Player : MonoBehaviour, IDataPersistence Inheritance object Player Implements IDataPersistence Properties Instance public static Player Instance { get; } Property Value Player Methods LoadPersistentData(GameData) public void LoadPersistentData(GameData gameData) Parameters gameData GameData SavePersistentData(ref GameData) public void SavePersistentData(ref GameData gameData) Parameters gameData GameData ToString() public override string ToString() Returns string Events OnPlayerMoved public event EventHandler OnPlayerMoved Event Type EventHandler"
  },
  "api/PlayerScripts.PlayerSettingsSO.html": {
    "href": "api/PlayerScripts.PlayerSettingsSO.html",
    "title": "Class PlayerSettingsSO | Czasoport Documentation",
    "keywords": "Class PlayerSettingsSO Namespace PlayerScripts Settings for scene changing and time changing systems. public class PlayerSettingsSO : ScriptableObject Inheritance object PlayerSettingsSO Fields movementSpeed public float movementSpeed Field Value float"
  },
  "api/PlayerScripts.html": {
    "href": "api/PlayerScripts.html",
    "title": "Namespace PlayerScripts | Czasoport Documentation",
    "keywords": "Namespace PlayerScripts Classes Player PlayerSettingsSO Settings for scene changing and time changing systems."
  },
  "api/Settings.DeveloperSettings.html": {
    "href": "api/Settings.DeveloperSettings.html",
    "title": "Class DeveloperSettings | Czasoport Documentation",
    "keywords": "Class DeveloperSettings Namespace Settings Manages different setting sets used for internal settings. public class DeveloperSettings : MonoBehaviour Inheritance object DeveloperSettings Fields Instance public static DeveloperSettings Instance Field Value DeveloperSettings appSettings Application settings public ApplicationSettingsSO appSettings Field Value ApplicationSettingsSO dsdSettings Default settings for new game save public DefaultSaveDataSO dsdSettings Field Value DefaultSaveDataSO intSettings Interactions settings public InteractionsSettingsSO intSettings Field Value InteractionsSettingsSO invSettings Inventory settings public InventorySettingsSO invSettings Field Value InventorySettingsSO playerSettings Player settings public PlayerSettingsSO playerSettings Field Value PlayerSettingsSO tpcSettings Settings for Time Change and Platform Change systems public TimePlatformChangeSettingsSO tpcSettings Field Value TimePlatformChangeSettingsSO"
  },
  "api/Settings.html": {
    "href": "api/Settings.html",
    "title": "Namespace Settings | Czasoport Documentation",
    "keywords": "Namespace Settings Classes DeveloperSettings Manages different setting sets used for internal settings."
  },
  "api/UI.Menu.html": {
    "href": "api/UI.Menu.html",
    "title": "Class Menu | Czasoport Documentation",
    "keywords": "Class Menu Namespace UI Script for main menu in game public class Menu : MonoBehaviour Inheritance object Menu"
  },
  "api/UI.PauseUI.html": {
    "href": "api/UI.PauseUI.html",
    "title": "Class PauseUI | Czasoport Documentation",
    "keywords": "Class PauseUI Namespace UI Script for pause menu in game public class PauseUI : MonoBehaviour Inheritance object PauseUI"
  },
  "api/UI.TimeChangeUI.html": {
    "href": "api/UI.TimeChangeUI.html",
    "title": "Class TimeChangeUI | Czasoport Documentation",
    "keywords": "Class TimeChangeUI Namespace UI public class TimeChangeUI : MonoBehaviour Inheritance object TimeChangeUI"
  },
  "api/UI.html": {
    "href": "api/UI.html",
    "title": "Namespace UI | Czasoport Documentation",
    "keywords": "Namespace UI Classes Menu Script for main menu in game PauseUI Script for pause menu in game TimeChangeUI"
  },
  "api/Utils.Attributes.ObjectIdentifierAttribute.html": {
    "href": "api/Utils.Attributes.ObjectIdentifierAttribute.html",
    "title": "Class ObjectIdentifierAttribute | Czasoport Documentation",
    "keywords": "Class ObjectIdentifierAttribute Namespace Utils.Attributes public class ObjectIdentifierAttribute : PropertyAttribute Inheritance object ObjectIdentifierAttribute"
  },
  "api/Utils.Attributes.ObjectIdentifierDrawer.html": {
    "href": "api/Utils.Attributes.ObjectIdentifierDrawer.html",
    "title": "Class ObjectIdentifierDrawer | Czasoport Documentation",
    "keywords": "Class ObjectIdentifierDrawer Namespace Utils.Attributes public class ObjectIdentifierDrawer : PropertyDrawer Inheritance object ObjectIdentifierDrawer Methods GetPropertyHeight(SerializedProperty, GUIContent) public override float GetPropertyHeight(SerializedProperty property, GUIContent label) Parameters property SerializedProperty label GUIContent Returns float OnGUI(Rect, SerializedProperty, GUIContent) public override void OnGUI(Rect position, SerializedProperty property, GUIContent label) Parameters position Rect property SerializedProperty label GUIContent"
  },
  "api/Utils.Attributes.ReadOnlyAttribute.html": {
    "href": "api/Utils.Attributes.ReadOnlyAttribute.html",
    "title": "Class ReadOnlyAttribute | Czasoport Documentation",
    "keywords": "Class ReadOnlyAttribute Namespace Utils.Attributes public class ReadOnlyAttribute : PropertyAttribute Inheritance object ReadOnlyAttribute"
  },
  "api/Utils.Attributes.ReadOnlyDrawer.html": {
    "href": "api/Utils.Attributes.ReadOnlyDrawer.html",
    "title": "Class ReadOnlyDrawer | Czasoport Documentation",
    "keywords": "Class ReadOnlyDrawer Namespace Utils.Attributes public class ReadOnlyDrawer : PropertyDrawer Inheritance object ReadOnlyDrawer Methods GetPropertyHeight(SerializedProperty, GUIContent) public override float GetPropertyHeight(SerializedProperty property, GUIContent label) Parameters property SerializedProperty label GUIContent Returns float OnGUI(Rect, SerializedProperty, GUIContent) public override void OnGUI(Rect position, SerializedProperty property, GUIContent label) Parameters position Rect property SerializedProperty label GUIContent"
  },
  "api/Utils.Attributes.html": {
    "href": "api/Utils.Attributes.html",
    "title": "Namespace Utils.Attributes | Czasoport Documentation",
    "keywords": "Namespace Utils.Attributes Classes ObjectIdentifierAttribute ObjectIdentifierDrawer ReadOnlyAttribute ReadOnlyDrawer"
  },
  "api/Utils.UniqueScriptableObject.html": {
    "href": "api/Utils.UniqueScriptableObject.html",
    "title": "Class UniqueScriptableObject | Czasoport Documentation",
    "keywords": "Class UniqueScriptableObject Namespace Utils public class UniqueScriptableObject : ScriptableObject Inheritance object UniqueScriptableObject Derived LevelInfoSO Fields uniqueId public string uniqueId Field Value string Methods GenerateUniqueId() public void GenerateUniqueId()"
  },
  "api/Utils.html": {
    "href": "api/Utils.html",
    "title": "Namespace Utils | Czasoport Documentation",
    "keywords": "Namespace Utils Classes UniqueScriptableObject"
  },
  "gdd/Fabuła/Fabuła.html": {
    "href": "gdd/Fabuła/Fabuła.html",
    "title": "Fabuła | Czasoport Documentation",
    "keywords": "Fabuła <-- GDD Motyw Jesteś aspirującym funkcjonariuszem Rady Czasoprzestrzeni. Jako egzemin wstępny musisz \"uratować\" mało znaczący świat przed zagładą. Zarys Fabularny Daleka przyszłość, Ziemia wynalazła technologię umożliwiającą podróż w czasoprzestrzeni, ale w tym czasie zaczęło brakować im surowców. Inne planety systemu słonecznego okazały się nieadekwatne do życia lub produkcji. Aby rozwiązać problem, Rada Czasoprzestrzeni, wysyła swoich pracowników na inne planety, w innych czasoprzestrzeniach, aby przejęli ich surowce. Ci funkcjonariusze potrafią przemieszczać się po różnych czasach cywilizacji na tej planecie, aby manipulować ich rozwój w taki sposób, aby produkowała ona duże ilości pożądanego surowca. Ostatecznie, Ziemianie kradną te surowce, przez co cywilizacje widzą ich jako kosmitów. (Przykładowo, ziemianie kradną zboże przenosząc je na Ziemie w sposób, który tworzy kręgi w zbożu). Gracz jest aspirującym funkcjonariuszem Rady Czasoprzestrzeni i jako egzamin wstępny wysłany zostaje na planetę niskiej wartości, która bez pomocy ulegnie zagładzie. Jeżeli graczowi się uda ją uratować, Ziemia zyska surowce i nowego funkcjonariusza. Jeżeli nie, trudno, ta planeta nie jest tak ważna, a gracz najwyżej nie zostanie przyjęty do pracy :( (Stworzenie szczegółowej fabuły zajmie trochę dłużej) (To, jak dokładnie działa i funkcjonuje Rada Czasoprzestrzeni nie jest zbyt ważne na ten moment. Jeżeli graficy chcą stworzyć jakiś concept art to mogą dać ponieść się wyobraźni, ale ważniejszy jest świat obcy, na którym gracz będzie przez praktycznie całą rozgrywkę) Progresja Historii Do napisania (Stworzenie szczegółowej fabuły zajmie trochę dłużej) Miejsca Akcji Przykładowe pomysły: pola/przedmieścia/zrujnowane budynki wioska/miasto/zniszczona metropolia centrum wioski/rynek/pobojowisko las/park/spalony park jaskinia/kopalnia/zawalona jaskinia Intro Pierwsza lokalizacja z którą ma do czynienia gracz, jak również jedyna planowana lokacja do demo gry. Początki - pola rolnicze z namiotami nieopodal. Złoty Wiek - przedmieścia tętniące życiem nie różniącym się zbytnio od dzisiejszego, ziemskiego. Upadek - zawalony mur graniczny, spalony punkt kontrolny. Kilka domów w złym stanie nieopodal. Lore To później."
  },
  "gdd/GDD.html": {
    "href": "gdd/GDD.html",
    "title": "Game Design Document | Czasoport Documentation",
    "keywords": "Game Design Document <-- ReadMe --> Fabuła <-- Zawiera: Motyw gry Opis Głównej Historii Jak historia ma się rozwijać podczas rozgrywki Lokacje użyte podczas kreowania wydarzeń Lore świata (Opcjonalie) --> Rozgrywka <-- Zawiera: Cel Gry Mechanika gry Opis umiejętności Gracza Jak mechanika będzie się rozwijała podczas rozgrywki Ulepszenia oraz Przedmioty Kiedy następuję przegrana Rozgrywki --> Postacie i Obiekty <-- Zawiera: Opis Postaci występujących w grze Jaką spełniają role np. handlarz, pomocnik gracza Historia tych postaci oraz ich dialogi Przedmioty które wpływają na rozgrywkę Ich specjalne właściwości --> Poziomy <-- Zawiera: Szkice poziomów oraz wykorzystane lokacje do ich stworzenia Opis jak dany poziom będzie działał na rozgrywkę czyli. W jaki sposób on utrudnia czy też ułatwia w graczom wygranie Gry. Opis występujących w nim specjalnych przedmiotów i obiektów. --> Interfejs_Użytkownika <-- Zawiera: Opis wszystkich scen developera np. Menu główne, sklep Jak ma działać logika UI np. gdzie ma przekierowywać naciśnięty guzik. Jak wiele ekranu będzie zajmować interfejs podczas rozgrywki jakie statystyki mają być na nim wyświetlone --> Grafika <-- Zawiera: Grafiki koncepcyjne rozgrywki, takie jak mapa, wrogowie, gracze, przedmioty, ... Grafiki Interfejsu użytkownika Animacje postaci Modele obiektów Tekstury Użyte Shadery --> Muzyka <-- Zawiera: Muzykę do Gry Dialogi postaci Dźwięki efektów środowiskowych Dźwięki efektów Interfejsu Użytkownika --> Opis Techniczny <-- Zawiera: Używany silnik graficzny Platformy na które ma zostać wydana Gra Język Programowania Programy Potrzebne do Pracy na grą jak np. Photoshop, Blender, VS Code Użyte technologie Czy i Jak będzie wyglądała komunikacja sieciowa w Grze --> Marketing i Monetyzacja <-- Zawiera: Grupa Docelowa, jak jest wielka oraz czemu nie da się jej zwiększyć Ilość potencjalnych odbiorców w każdej Platformie (np. PC, Android, PS4) Jak i Gdzie zostanie gra upubliczniona w celu jej rozpromowania Czy jest ona Płatna czy Darmowa Szacunek odniesionych z niej przychodów. --> Nowe Pomysły <-- Zawiera: Jest to baza pomysłów które warto zapamiętać Każdy użytkownik powinien móc wpisywać tutaj co tylko zechce Należy dla każdego każdego pomysłu stworzyć w folderze \"Nowe Pomysły\" dowolny plik markdown a następnie go opisać"
  },
  "gdd/Grafika/Grafika.html": {
    "href": "gdd/Grafika/Grafika.html",
    "title": "Grafika | Czasoport Documentation",
    "keywords": "Grafika <-- GDD Zależna od grafików, ale gra przedstawiona będzie w 2.5D w widoku od góry/izometrycznym. Jeżeli 3D to raczej coś wystylizowanego i prostego jak \"Tunic\", albo \"Death's Door\". Może być też Pixel art, a nawet rysowane, jeżeli implementacja tego okaże się łatwiejsza. Sugeruję, aby graficy zdecydowali między sobą w jaki sposób najbardziej skutecznie będą w stanie przedstawić świat w grze. Grafiki Koncepcyjne Świata ... Grafiki Koncepcyjne Postaci Postać 1 Szkic Postaci lub model ... Animacja ... Grafiki Koncepcyjne Wrogów Wróg 1 Szkic Wroga lub model ... Animacja ... ... Grafiki Interfejsu Użytkownika ... Tekstury ... Użyte Shadery ..."
  },
  "gdd/Interfejs_Użytkownika/Interfejs_Użytkownika.html": {
    "href": "gdd/Interfejs_Użytkownika/Interfejs_Użytkownika.html",
    "title": "Interfejs Użytkownika | Czasoport Documentation",
    "keywords": "Interfejs Użytkownika <-- GDD Minimalny, podobnie jak kontrole. Gracz na ekranie widzi hotbar (ekwipunek). Gdy zbliży się do obiektu z którym może wejść w interakcję, ten obiekt otacza outline. Na ekranie widoczny jest także 'Czasoport', który wyświetla, w którym czasie jesteśmy i czy gracz może się bezpiecznie przenieść w danym kierunku w czasie (jeżeli jest w walce, albo w innym czasie ). Rozgrywka Szkic interfejsu Zrobiłem w pixel-arcie, bo tak było mi najłatwiej szybko zrobić coś kolorowego i czytelnego. Jak wiele zakrywa interfejs użytkownika Około 20-30% ekranu - jak najmniej, aby było funkcjonalnie (interfejs przedstawiony na szkicu jest bardzo powiększony, więc ostatecznie elementy będą mniejsze, ale ogólne ich rozmieszczenie jest prawidłowe, chociaż nie wyryte w kamieniu) Jakie Statystyki będą wyświetlane i gdzie Kursor (przedstawiony bardzo powiększonej wersji na szkicu) Przedmioty w ekwipunku Czas, w którym gracz się znajudje Czy jest bezpieczne przeniesienie się w czasie w daną stronę (czerwony kolor - niebezpiecznie, zielony - bezpiecznie) (opcjonalnie) cel/objective Jakie zdarzenia mają się wykonywać po naciśnięciu odpowiednich przycisków ... Menu Szkic interfejsu ... Jakie zdarzenia mają się wykonywać po naciśnięciu odpowiednich przycisków ... Sklep ..."
  },
  "gdd/Marketing_i_Monetyzacja/Marketing_i_Monetyzacja.html": {
    "href": "gdd/Marketing_i_Monetyzacja/Marketing_i_Monetyzacja.html",
    "title": "<-- GDD | Czasoport Documentation",
    "keywords": "Documentation\\GDD\\Marketing_i_Monetyzacja\\Marketing_i_Monetyzacja.md# Marketing i Monetyzacja <-- GDD Rodzaj Dystrybucji: Darmowa, Płatna ... Grupa Docelowa Zakres grupy ... Do kogo zwracamy się z naszą ofertą ... Czemu nie da się zwiększyć grupy docelowej ... Platformy wydania Gry PC Wielkość grupy docelowej ... Cena Produktu ... ... Jak i Gdzie gra zostanie upubliczniona Lista Platform Google Facebook ... W jaki sposób zamierzamy reklamować Grę ... Maksymalna ilość środków przeznaczona na Reklamę ... Szacunek Odniesionych z niech przychodów ..."
  },
  "gdd/Muzyka/Muzyka.html": {
    "href": "gdd/Muzyka/Muzyka.html",
    "title": "Muzyka | Czasoport Documentation",
    "keywords": "Muzyka <-- GDD Do ustalenia. Instrumenty będą zmieniać się w zależności od czasu, w którym gracz się znajduje, gdy melodia pozostanie mniej więcej taka sama. Muzyka podczas rozgrywki ... Dźwięki efektów środowiskowych ... Dialogi postaci ... Dźwięki efektów interfejsu użytkownika ..."
  },
  "gdd/Nowe_Pomysły/Nowe_Pomysły.html": {
    "href": "gdd/Nowe_Pomysły/Nowe_Pomysły.html",
    "title": "Nowe Pomysły | Czasoport Documentation",
    "keywords": "Nowe Pomysły <-- GDD Pomysł 1 ... Pomysł 2 ... ..."
  },
  "gdd/Opis_Techniczny/Opis_Techniczny.html": {
    "href": "gdd/Opis_Techniczny/Opis_Techniczny.html",
    "title": "Opis Techniczny | Czasoport Documentation",
    "keywords": "Opis Techniczny <-- GDD Używany silnik graficzny Unity 2021.3.12f1 Język Programowania C# Użyte technologie ... Programy potrzebne do pracy nad grą Unity, IDE, GIMP Platformy wydania gry WebGL, Windows, Linux, MacOS Komunikacja sieciowa jeżeli jest Brak, gra nie wymaga komunikacji sieciowej. Komunikacja z Bazą danych Brak, gra nie wymaga komunikacji z bazą danych."
  },
  "gdd/Postacie_i_Obiekty/Postacie_i_Obiekty.html": {
    "href": "gdd/Postacie_i_Obiekty/Postacie_i_Obiekty.html",
    "title": "Postacie i obiekty | Czasoport Documentation",
    "keywords": "Postacie i obiekty <-- GDD Postacie występujące w grze (Ostateczne wyglądy zależne od grafików, to są jedynie pomysły, ale inspiracja kulturami prekolumbijskimi jest ważna) Postać gracza Najważniejszą postacią w grze jest postać gracza. Postać na ogół nie będzie wiele mówić. Jest bardziej po prostu sposobem, w jaki gracz może poruszać się po świecie i wchodzić z nim w interakcję. Postać gracza przy interakcji z niektórymi przedmiotami może podawać wskazówki w formie dymku dialogowego. Ubiór postaci będzie przypominał ubiór reszty Ziemian – nowoczesny i inspirowany połączeniem konkwistadora z astronautą. Będzie to wyraźna odskocznia od wyglądu obywateli planety, którą gracz ma za zadanie “uratować”. Płeć postaci nie odgrywa tu zbyt wielkiej roli, ale ważne żeby wyglądała na około 20-25 lat. NPC Z reguły żadna postać nie będzie nazywana po imieniu, gdyż mówić będą bardzo mało. W tym momencie nie ma konkretnego wyglądu żadnej postaci, ale wygląd obywateli świata, “ratowanego” przez gracza będzie inspirowany aztekami i ich bóstwem. Kolor skóry może być żółty, czerwony, niebieski, a ich ubiór będzie bardziej “kwadratowy” i kanciasty w porównaniu z bardziej zaokrąglonym wyglądem gracza. Ci obywatele mogliby też różnić się od ludzi, np. większa ilość kończyn, lekko nieludzkimi kształty, itp. Ważne jednak, aby nie byli zbyt \"obcy\". Nie mają odstraszać gracza. Mają po prostu sprawiać wrażenie mieszkańców, którzy jednak nie są dokładnie tacy jak gracz. Mają oni swoje prace i życia, ale nie są one zbyt ważne dla gracza, chyba, że musi z nimi wejść w interakcję. Przedmioty Przedmioty są bardzo ważną częścią gry i będzie ich stosunkowo wiele. Większość z nich będzie wykorzystywana do rozwiązywania zagadek i przekonywania bądź niwelowania NPC. Gracz bedzie w stanie łączyć lub ulepszać niektóre przedmioty w specyficznych miejscach. Przedmioty mogą być brońmi, kluczami, narzędziami, itp. Dokładne przedmioty powstaną przy wypisywaniu fabuły. Jedynym przedmiotem różniącym się od reszty jest czasoport, ale on nie jest umieszczony w ekwipunku. Gracz zawsze go ma – jest integralną mechaniką gry jedynie przedstawioną w postaci fizycznej."
  },
  "gdd/Poziomy/Poziomy.html": {
    "href": "gdd/Poziomy/Poziomy.html",
    "title": "Poziomy | Czasoport Documentation",
    "keywords": "Poziomy <-- GDD Koncepcja ogólna (Ostateczne wyglądy zależne od grafików, to są jedynie pomysły, ale inspiracja kulturami prekolumbijskimi jest ważna) Akcja gry toczy się na jednej planecie, ale w trzech czasach (“początki”, “złoty wiek” i “upadek” cywilizacji). Nie jest to jednak całkiem otwarty świat. Każda czasoprzestrzeń podzielona jest na strefy. Przykładowo, gracz jest w wiosce, ale gdy przejdzie do lasu ładuje się nowy poziom. Budynki w różnych czasach Podobnie jak obywatele tej planety, ich budynki powinny być stosunkowo kanciaste. początki cywilizacji – namioty stworzone z wielkich liści i kolorowego drewna złoty wiek – budynki inspirowane pod względem kształtu świątyniami Azteków i Majów. Może w niektórych miejscach graffiti zamiast rytów upadek cywilizacji – budynki podobne jak w złotym wieku, ale wyższe, z większą ilością metalu, jednak zrujnowane. Fauna i Flora (Świat naturalny) Rozgrywka będzie odbywać się na obcej planecie. Rośliny obce inne niż na ziemi. Niebieska/Czerwona/Pomarańczowa roślinność. Ogólnie obca paleta barw, ale nie może być zbyt rażąca, gdyż gracz będzie się na nią patrzył przez sporą część rozgrywki. Wielkie rośliny z wielkimi liśćmi i małymi kwiatami. Zwierzęta także powinny być obce. Nie musimy pokazywać ich wiele, ale gatunki powinny być inspirowane kulturami przedkolumbijskimi, możliwie z nietypowymi połączeniami, np. latające jaszczurki, pumo-axolotl… Przykładowe poziomy pola/przedmieścia/zrujnowane budynki wioska/miasto/zniszczona metropolia centrum wioski/rynek/pobojowisko las/park/spalony park jaskinia/kopalnia/zawalona jaskinia Poziom 1 Szkic Poziomu ... Opis użytych do jego stworzenia bloków i przedmiotów ... W jaki sposób na wpływać na rozgrywkę Jest wprowadzeniem do świata i mechaniki gry (samouczkiem) i to w nim gracz zdobywa przynajmniej pierwszy czas, do którego może się przenosić. Myślimy, że lepiej, gdyby gracz nie mógł od razu przenosić się pomiędzy czasami. Po rozwiązaniu jednej łamigłówki/pokonaniu pierwszej przeszkody i przyzwyczajeniu się do rozgrywki odblokowuje tę moc. Ogólnie powinno zająć to ok. 5 min. Szczegóły poziomu zostaną opracowane niedługo."
  },
  "gdd/Poziomy/Samouczek.html": {
    "href": "gdd/Poziomy/Samouczek.html",
    "title": "Samouczek | Czasoport Documentation",
    "keywords": "Samouczek <-- GDD Tekst w nawiasach () to prompty, które będą się wyświetlać na ekranie gracza podczas samouczka, aby pokazać mu kontrole. W akcjach uwzględniony jest tylko jeden przycisk (np. LPM), ale mogą wyświetlać się wszystkie możliwości (LPM, J, F, South) W nawiasach [] wypisane są przedmioty do podniesienia. Area 1 Teleportujemy się do zniszczonej przyszłości. Znajdujemy się w zniszczonym magazynie. W pomieszczeniu mogą być futurystyczne pudła, szafki, półki itp. Wyraźnie widać ślady wybuchu, jednym z nich są zawalone gruzem drzwi. Oświetlenie zapewnia dziura w suficie. Mamy czasoport, ale nie mamy części, które pozwalają na przenoszenie się w czasie. Przechodzimy się po pomieszczeniu (WSAD - chodzenie) Na ziemi leży [młotek] (LPM - podnoszenie). Drugie co rzuca nam się w oczy to drzwi, które są oczywiście zablokowane, po interakcji z nimi dostajemy informację że potrzebujemy czegoś do odsunięcia gruzu - rozpoczynamy więc przeszukiwanie pomieszczenia i podnoszenie następnych itemów. Rzeczy na podłodze to póki co zapychacze eq, [kamień], [deska], lub [placeholdery], ale po lewej stronie pomieszczenia znajduje się szafka, która po otwarciu przyciskiem interakcji ma w sobie [łom], niezbędny do odsłonięcia drzwi. Po podniesieniu łomu otrzymujemy podpowiedź (prompt) jak go wybrać w ekwipunku, (PPM - użycie przedmiotu / 1,2,3 - wybieranie z ekwipunku) Po czym używamy go do otwarcia drzwi Area 1.5 Wchodzimy do długiego korytarza. Otrzymujemy powiadomienie dźwiękowe (lub inne ostrzeżenie, np. trzęsienie się ekranu i dźwięk spadających kamieni), a po przejściu pewnej odległości korytarz zaczyna się walić - (Tryb biegu - shift [przytrzymanie]) Wybiegamy z walącego się korytarza i wpadamy do następnego pomieszczenia. Area 2 W tym pomieszczeniu prąd dawno nie działa, pokój jest opustoszały i opuszczony. Siatka znajdująca się w pomieszczeniu oddziela nas od schodów prowadzących na górę. W siatce znajdują się drzwi zamknięte na kłódkę. Pokój ten jest byłym magazynem/pomieszczeniem z generatorami, bezpiecznikami itp., powinien on wyglądać na zamieszkiwanego w przeszłości i wskazywać na zagładę właścicieli - nie tylko ten pokój ale całą lokacja samouczka. Przeszukujemy więc pomieszczenie dostając kilka opisów (przy interakcjach nasza postać może powiedzieć coś krótkiego). Obok siebie znajdują się 3 przedmioty, [fragment czasoportu pozwalający na przenoszenie się do współczesności] i 2 bezużyteczne [kamienie] (Zmiana celu interakcji – L) Dodatkowo, jeśli nazbieraliśmy się śmieci uczymy się jak je wyrzucać (Wyrzucenie przedmiotu – T) (Użycie czasoportu - Q (do tyłu) E (do przodu)) - w tym momencie gracz ma możliwość przenoszenia się jedynie pomiędzy upadkiem a współczesnością. Przenosisz się do współczesności. Prąd działa, pokój jest oświetlony, ale potrzebujesz klucza (z przyszłości), lub młotka, aby otworzyć drzwi. Po użyciu klucza możesz wyjść przez drzwi, na schody, które się za nimi znajdują. Area 3 Wychodzisz schodami do \"głównej strefy\" gry. Pewnego rodzaju main hub (ala Metroidvania). Jest to już koniec samouczka. Myślimy, że main hub będzie rynkiem/galerią handlową wewnątrz świątyni, ale jeszcze musimy to przemyśleć. Oczywiście w tej wersji gry ten main hub nie będzie bardzo rozbudowany, gdyż tworzymy tylko jedną ścieżkę fabularną."
  },
  "gdd/README.html": {
    "href": "gdd/README.html",
    "title": "Nazwa gry: Timeport | Czasoport Documentation",
    "keywords": "Nazwa gry: Timeport Opis świata Gry Świat gry podzielony jest na 3 przestrzenie czasowe: początki cywilizacji - dominują tam wydeptane szlaki, lasy, pola, małe osady, namioty z liści, domki z gliny, pierwsze uprawy, itp. złoty wiek cywilizacji - dominują tam twierdze, miasta, świątynie, wsie, itp. upadek cywilizacji - dominują tam ruiny, wody zanieczyszczone kwasem, skażona atmosefera, ogólny niepokój, itp. Składa się on z wielu plansz przedstawiających pojedyczne lokalizacje, pomiędzy którymi gracz może swobodnie się przemieszczać. Niektóre plansze przeznaczone będą do eksploracji, a niektóre stawiać będą przed graczem przeszkody. Główny Bohater Bezimienny kandydat na stażystę Komisji Czasoprzestrzennej. W przeciwieństwie do reszty postaci spotkanych podczas rozgrywki jest człowiekiem. Grafiki koncepcyjne Gatunek oraz Styl Gatunek - Future Fantasy Adventure and Puzzle Rodzaj Grafiki - 2.5D, styl wykonania do ustalanie z grafikami Widok - Isometryczny Mechanika wyróżniająca grę Rozgrywka w kilku przestrzeniach czasowych, pomiędzy którymi gracz może przemieszczać się w dowolnym momencie. Pozwala to na obchodzenie przejść, używanie przedmiotów z jednej przestrzeni w innej, zmianie stanu przestrzeni znajdującej się dalej w przyszłość, itp. Używane Technologie Silnik: Unity 2021.3.12f1 Edytor Graficzny: Według uznania grafików Marketing oraz Monetyzacja Grupa Docelowa - Gen z Monetyzacja - ... --> Pełna Dokumentacja <--"
  },
  "gdd/Rozgrywka/Rozgrywka.html": {
    "href": "gdd/Rozgrywka/Rozgrywka.html",
    "title": "Rozgrywka | Czasoport Documentation",
    "keywords": "Rozgrywka <-- GDD Cel Gry Przejście przez fabułę poprzez rozwiązywanie problemów. Zamysł, jest taki, że ostatecznie ścieżek i zakończeń będzie wiele, ale póki co skupimy się na linearnej fabule, bez żadnych ścieżek pobocznych i dodatkowych zakończeń. Na ten moment gracz ma doświadczyć solidnej 30 minutowej rozgrywki. Progresja gry Gracz znajduje się w pseudo-otwartym świecie podobnym w strukturze do starych gier Zelda. Świat jest na tyle otwarty, że gracz może iść prawie gdzie chce, ale niektóre ścieżki będą zamknięte, dopóki nie: znajdzie (lub stworzy) pewnego przedmiotu, dokona jakiegoś czynu lub rozwiąże zagadki Poziom trudności zagadek będzie się zwiększał wraz z postępem gry. Umiejętności Gracza Oprócz podstawowych umiejętności poruszania się i interakcji ze światem, gracz posiada możliwość przenoszenia się w czasie. Istnieją 3 czasy, które może odwiedzać – “początki”, “złoty wiek” i “upadek” cywilizacji. Tradycyjny system walki nie istnieje. Każda broń jest zarówno przedmiotem w ekwipunku z ograniczoną ilością amunicji, którą gracz może użyć w danej sytuacji, aby ją rozwiązać. Bronie automatycznie celują w najbliższy adekwatny cel. Mechanika Przenoszenie się w czasie. Proste integracje z przedmiotami (na początek każdy przedmiot ma 1 cel) Sterowanie jest stosunkowo proste. Gracz może się poruszać, biegać, wchodzić w interakcję ze światem/przedmiotami i przenosić się w czasie. Rozgrywka polegać będzie na przemieszczaniu się przez świat, pokonując przy tym przeszkody stawiane przed graczem. W zależności od sposobu pokonania problemu rzeczy w świecie będą się zmieniać. Przynajmniej tak wyglądałaby pełna wersja gry. W tej wersji rozwiązanie na daną sytuację będzie jedno, a gracz będzie przechodził przez fabułę w sposób przewidziany przez twórców gry. Rozgrywka pod tym względem przypominać będzie gry przygodowe typu point and click, szczególnie, że niektóre problemy trzeba będzie rozwiązać za pomocą znalezionych lub stworzonych/połączonych w specjalnych miejscach przedmiotach. Znaczną część rozgrywki będzie zajmować przenoszenie się między czasami aby rozwiązać lub ominąć problem, bądź zdobyć jakiś potrzebny przedmiot. Mechanika ta przypominać będzie misje \"Effect and Cause\" z gry \"Titanfall 2\". Różnicą będzie to, że w naszej grze są 3 płaszczyzny czasowe, a gra nie jest skupiona na akcji. Ulepszenie oraz Przedmioty Gracz jest w stanie łączyć oraz ulepszać przedmioty w specyficznych miejscach. Np. przy osełce może zaostrzyć przedmiot 'Tępa siekiera' i otrzymać przedmiot 'Ostra siekiera'. Kiedy następuje przegrana W ostatecznej wersji gry nie dochodziłoby do przegranej. Najwyżej po dokonaniu wystarczającej liczby złych wyborów gracz otrzymałby “bad ending”. Nawet po “złej” decyzji gra toczyłaby się dalej. W wersji, którą tworzymy najprawdopodobniej będzie musiał istnieć ekran “game over”, gdyż nie sposób szybko stworzyć wiele różnych ścieżek w krótkim czasie. Game over wyświetlałby się jednak jedynie w rzeczywiście niebezpiecznych sytuacjach (np. zabity przez wściekły tłum, bo nie użyłeś przedmiotu, który pozwalał na obronę). W innych wypadkach gracz po prostu pozostaje w miejscu, aż rozwiąże problem."
  },
  "index.html": {
    "href": "index.html",
    "title": "Nazwa gry: Timeport | Czasoport Documentation",
    "keywords": "Nazwa gry: Timeport Opis świata Gry Świat gry podzielony jest na 3 przestrzenie czasowe: początki cywilizacji - dominują tam wydeptane szlaki, lasy, pola, małe osady, namioty z liści, domki z gliny, pierwsze uprawy, itp. złoty wiek cywilizacji - dominują tam twierdze, miasta, świątynie, wsie, itp. upadek cywilizacji - dominują tam ruiny, wody zanieczyszczone kwasem, skażona atmosefera, ogólny niepokój, itp. Składa się on z wielu plansz przedstawiających pojedyczne lokalizacje, pomiędzy którymi gracz może swobodnie się przemieszczać. Niektóre plansze przeznaczone będą do eksploracji, a niektóre stawiać będą przed graczem przeszkody. Główny Bohater Bezimienny kandydat na stażystę Komisji Czasoprzestrzennej. W przeciwieństwie do reszty postaci spotkanych podczas rozgrywki jest człowiekiem. Grafiki koncepcyjne Gatunek oraz Styl Gatunek - Future Fantasy Adventure and Puzzle Rodzaj Grafiki - 2.5D, styl wykonania do ustalanie z grafikami Widok - Isometryczny Mechanika wyróżniająca grę Rozgrywka w kilku przestrzeniach czasowych, pomiędzy którymi gracz może przemieszczać się w dowolnym momencie. Pozwala to na obchodzenie przejść, używanie przedmiotów z jednej przestrzeni w innej, zmianie stanu przestrzeni znajdującej się dalej w przyszłość, itp. Używane Technologie Silnik: Unity 2021.3.12f1 Edytor Graficzny: Według uznania grafików Marketing oraz Monetyzacja Grupa Docelowa - Gen z Monetyzacja - ..."
  },
  "manual/manuals/cinput-manual.html": {
    "href": "manual/manuals/cinput-manual.html",
    "title": "Custom Input System | Czasoport Documentation",
    "keywords": "Custom Input System"
  },
  "manual/manuals/system-architecture.html": {
    "href": "manual/manuals/system-architecture.html",
    "title": "System Architecture | Czasoport Documentation",
    "keywords": "System Architecture"
  },
  "manual/tutorials-info/generating-docs.html": {
    "href": "manual/tutorials-info/generating-docs.html",
    "title": "Generating Documentation Manually | Czasoport Documentation",
    "keywords": "Generating Documentation Manually Project uses DocFX to generate documentation. GitHub will generate documentation automatically on each push to master branch. However, before merging branch you are currently working to master, it is recommended to generate documentation locally and check if everything is fine. Note Updating the documentation after making relevant changes is required by anyone working on the project. Installing DocFX Please follow steps described in section Create New Website in DocFX installation guide. Czasoport documentation structure Two important folders in Documentation folder are: manual and resources. Manual folder contains Markdown files, that are basically standalone articles published on the site. In order to add new article, create new .md file in one of the subfolders and add link to it in manual/toc.yml file. Structure of toc.yml file is self-explanatory. Resources folder contains images and other files that are used in articles. Folder structure should follow structure of manual folder, but resources for each article should be placed in additional folder with the name of the article. Please check how this picture of a cute cat is placed in the folders in order to understand how it works: ![Cute cat](~/resources/tutorials-info/generating-docs/cat.jpg)"
  },
  "manual/tutorials-info/major-settings-changes.html": {
    "href": "manual/tutorials-info/major-settings-changes.html",
    "title": "Major settings changes | Czasoport Documentation",
    "keywords": "Major settings changes Some settings chages might be the key to game performance, stability and quality. Some settings may break the game entirely. This page will list the most important settings that have been changed, why they were changed and what the old values were. In case of any errors in the future, please refer to this page and check if some change might be the reason for it. Important Each time an important setting is changed, MSC should be created and documented here and on corresponding pull request. Template for MSC can be found at the end of source code for this page. [MSC #1] Api Compatability Level MSC #1 Api Compatability Level Pull Request Input Lock Setting Project Settings -> Player -> Other Settings -> Configuration -> Api Compatability Level Old Value .NET Standard 2.1 New Value .NET Framework Reason for change Ability to use dynamic type Possible implications Worse cross-platform compatibility, problems with building for different platforms might arise MSC #2 Gravity Pull Request [NAME OF PR](LINK TO PR) Setting Project Settings -> Physics 2D -> Gravity Old Value X:0 Y:-9.81 New Value X:0 Y:0 Reason for change We don't need gravity in our game. Possible implications Object with RigidBody will not fall by default."
  },
  "manual/tutorials-info/workflow.html": {
    "href": "manual/tutorials-info/workflow.html",
    "title": "Workflow | Czasoport Documentation",
    "keywords": "Workflow Git Branches Pushes to master branch are protected. Each change, addition, hotfix etc. must be done on separate branch and then merged to master via pull request. Branch names must follow this pattern: type/short-description. For example: feature/adding-new-weapon. Available types are: feature - new addition, system, interaction, item, etc. bugfix - fixing a known bug, error, etc. hotfix - fixing a bug that is critical and needs to be fixed as soon as possible refactor - refactoring code, changing code structure, etc. documentation - adding new documentation, changing existing documentation, etc. spike - trying out new idea, testing new system, etc. short-description must be short, but descriptive. For example: feature/adding-new-weapon is good, but feature/weapon is not. Only kebab-case is allowed. Commits There are no enforced rules on commit messages, but please use descriptive ones. Pull Requests Please provide good name and at least short description of your pull request. If you are adding new feature, describe it as good as you can. If you are fixing a bug, describe what was the bug and how did you fix it. Pull Requests must be approved by at least one code owner. Code owners are automatically added to each pull request. Merge commits are disabled. Each pull request must be merged via squash and merge. Resolving conflicts If you are resolving conflicts, please use rebase instead of merge. This will keep commit history clean. If you are not sure how to do it, please ask for help. Pair programming If you are working on the same branch with someone else, please also use rebase instead of normal pull."
  }
}